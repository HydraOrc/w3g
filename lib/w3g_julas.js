// Generated by CoffeeScript 1.7.1
(function() {
  var ACTION_DELAY, MAX_DATABLOCK, RETRAINING_TIME, Replay, actions, colors, convert, exit, fs, inflate, observers, php, speed, unpack, visibility;

  fs = require('fs');

  php = require('phpjs');

  convert = require('./w3g_julas_convert');

  actions = require('./w3g_action');

  speed = require('./w3g_speed');

  visibility = require('./w3g_visibility');

  colors = require('./w3g_color');

  observers = require('./w3g_observer');

  unpack = require('../utils/unpack');

  inflate = require('../utils/inflate');

  MAX_DATABLOCK = 1500;

  ACTION_DELAY = 1000;

  RETRAINING_TIME = 15000;

  exit = function(msg) {
    throw msg;
  };

  module.exports = Replay = (function() {
    Replay.prototype.max_datablock = +MAX_DATABLOCK;

    Replay.prototype.fbytesread = 0;

    Replay.prototype.data = '';

    function Replay(filename, parse_actions, parse_chat) {
      this.parse_actions = parse_actions || true;
      this.parse_chat = parse_chat || true;
      this.filename = filename;
      this.game = {
        player_count: 0
      };
      this.players = {};
      this.teams = [];
      this.time = 0;
      this.chat = [];
      this.leaves = 0;
      if (!(this.fp = fs.openSync(filename, 'r'))) {
        return exit(this.filename + ': Can\'t read replay file');
      }
      this.parseheader();
      this.parsedata();
      this.cleanup();
      fs.closeSync(this.fp);
      delete this.fp;
      delete this.data;
      delete this.max_datablock;
      delete this.ability_delay;
      delete this.leave_unknown;
      delete this.continue_game;
      delete this.fbytesread;
      delete this.header.blocks;
      delete this.header.flags;
      delete this.header.header_size;
      delete this.header.header_v;
      delete this.header.u_size;
      delete this.parse_actions;
      delete this.parse_chat;
      delete this.time;
      delete this.leaves;
      delete this.players;
    }

    Replay.prototype.fread = function(length) {
      var buffer, data;
      buffer = new Buffer(length);
      fs.readSync(this.fp, buffer, 0, length, this.fbytesread);
      this.fbytesread += length;
      return data = buffer.toString('binary');
    };

    Replay.prototype.parseheader = function() {
      var data;
      data = this.fread(48);
      this.header = unpack('a28intro/Vheader_size/Vc_size/Vheader_v/Vu_size/Vblocks', data);
      if (this.header.intro !== "Warcraft III recorded game\x1A") {
        return exit('Not a replay file');
      }
      if (this.header.header_v === 0) {
        data = this.fread(16);
        this.header = php.array_merge(this.header, unpack('vminor_v/vmajor_v/vbuild_v/vflags/Vlength/Vchecksum', data));
        return this.header.ident = 'WAR3';
      } else if (this.header.header_v === 1) {
        data = this.fread(20);
        this.header = php.array_merge(this.header, unpack('a4ident/Vmajor_v/vbuild_v/vflags/Vlength/Vchecksum', data));
        this.header.minor_v = 0;
        return this.header.ident = php.strrev(this.header.ident);
      }
    };

    Replay.prototype.parsedata = function() {
      var block_header, blocks_count, i, temp;
      this.fbytesread = this.header.header_size;
      blocks_count = this.header.blocks;
      i = 0;
      while (i < blocks_count) {
        block_header = unpack('vc_size/vu_size/Vchecksum', this.fread(8));
        temp = this.fread(block_header.c_size);
        temp = php.substr(temp, 2, -4);
        temp[0] = php.chr(php.ord(temp[0]) | 1);
        if (temp = inflate(temp)) {
          this.data += temp;
        } else {
          return exit(this.filename + ': Incomplete replay file');
        }
        if (i === 0) {
          this.data = php.substr(this.data, 4);
          this.loadplayer();
          this.loadgame();
        } else if (blocks_count - i < 2) {
          this.max_datablock = 0;
        }
        if (this.parse_chat || this.parse_actions) {
          this.parseblocks();
        } else {
          break;
        }
        i++;
      }
    };

    Replay.prototype.loadplayer = function() {
      var action, i, key, player_id, temp;
      temp = unpack('Crecord_id/Cplayer_id', this.data);
      this.data = php.substr(this.data, 2);
      player_id = temp.player_id;
      this.players[player_id] = {
        player_id: player_id,
        initiator: convert.bool(!temp.record_id),
        name: '',
        actions_details: {},
        hotkeys: {},
        units: {
          order: {}
        },
        heroes: {
          order: {}
        },
        buildings: {
          order: {}
        },
        items: {
          order: {}
        },
        upgrades: {
          order: {}
        }
      };
      for (key in actions) {
        action = actions[key];
        this.players[player_id].actions_details[action] = 0;
      }
      i = 0;
      while (this.data[i] !== "\x00") {
        this.players[player_id].name += this.data[i];
        i++;
      }
      if (this.players[player_id].name === '') {
        this.players[player_id].name = 'Player ' + player_id;
      }
      this.data = php.substr(this.data, i + 1);
      if (php.ord(this.data[0]) === 1) {
        this.data = php.substr(this.data, 2);
      } else if (php.ord(this.data[0]) === 8) {
        this.data = php.substr(this.data, 1);
        temp = unpack('Vruntime/Vrace', this.data);
        this.data = php.substr(this.data, 8);
        this.players[player_id].exe_runtime = temp.runtime;
        this.players[player_id].race = convert.race(temp.race);
      }
      if (this.parse_actions) {
        this.players[player_id].actions = 0;
      }
      if (!this.header.build_v) {
        this.players[player_id].team = (player_id - 1) % 2;
      }
      return this.game.player_count++;
    };

    Replay.prototype.loadgame = function() {
      var i, mask, ords, temp;
      this.game.name = '';
      i = 0;
      while (this.data[i] !== php.chr(0)) {
        this.game.name += this.data[i];
        i++;
      }
      this.data = php.substr(this.data, i + 2);
      temp = '';
      i = 0;
      while (this.data[i] !== php.chr(0)) {
        if (i % 8 === 0) {
          mask = php.ord(this.data[i]);
        } else {
          temp += php.chr(php.ord(this.data[i]) - !(mask & (1 << i % 8)));
        }
        i++;
      }
      this.data = php.substr(this.data, i + 1);
      this.game.speed = speed[php.ord(temp[0])];
      if (php.ord(temp[1]) & 1) {
        this.game.visibility = visibility[0];
      } else if (php.ord(temp[1]) & 2) {
        this.game.visibility = visibility[1];
      } else if (php.ord(temp[1]) & 4) {
        this.game.visibility = visibility[2];
      } else if (php.ord(temp[1]) & 8) {
        this.game.visibility = visibility[3];
      }
      this.game.observers = observers[((php.ord(temp[1]) & 16) === true) + 2 * ((php.ord(temp[1]) & 32) === true)];
      this.game.teams_together = convert.bool(php.ord(temp[1]) & 64);
      this.game.lock_teams = convert.bool(php.ord(temp[2]));
      this.game.full_shared_unit_control = convert.bool(php.ord(temp[3]) & 1);
      this.game.random_hero = convert.bool(php.ord(temp[3]) & 2);
      this.game.random_races = convert.bool(php.ord(temp[3]) & 4);
      if (php.ord(temp[3]) & 64) {
        this.game.observers = observers[4];
      }
      temp = php.substr(temp, 13);
      temp = php.explode(php.chr(0), temp);
      this.game.creator = temp[1];
      this.game.map = temp[0];
      temp = unpack('Vslots', this.data);
      this.data = php.substr(this.data, 4);
      this.game.slots = temp.slots;
      this.game.type = convert.game_type(php.ord(this.data[0]));
      this.game["private"] = convert.bool(php.ord(this.data[1]));
      this.data = php.substr(this.data, 8);
      while (php.ord(this.data[0]) === 0x16) {
        this.loadplayer();
        this.data = php.substr(this.data, 4);
      }
      temp = unpack('Crecord_id/vrecord_length/Cslot_records', this.data);
      this.data = php.substr(this.data, 4);
      this.game = php.array_merge(this.game, temp);
      ords = temp.slot_records;
      i = 0;
      while (i < ords) {
        if (this.header.major_v >= 7) {
          temp = unpack('Cplayer_id/x1/Cslot_status/Ccomputer/Cteam/Ccolor/Crace/Cai_strength/Chandicap', this.data);
          this.data = php.substr(this.data, 9);
        } else if (this.header.major_v >= 3) {
          temp = unpack('Cplayer_id/x1/Cslot_status/Ccomputer/Cteam/Ccolor/Crace/Cai_strength', this.data);
          this.data = php.substr(this.data, 8);
        } else {
          temp = unpack('Cplayer_id/x1/Cslot_status/Ccomputer/Cteam/Ccolor/Crace', this.data);
          this.data = php.substr(this.data, 7);
        }
        if (temp.slot_status === 2) {
          temp.color = colors[temp.color];
          temp.race = convert.race(temp.race);
          temp.ai_strength = convert.ai(temp.ai_strength);
          if (temp.computer === 1) {
            this.players.push(temp);
          } else {
            this.players[temp.player_id] = php.array_merge(this.players[temp.player_id], temp);
          }
          this.players[temp.player_id].retraining_time = 0;
        }
        i++;
      }
      temp = unpack('Vrandom_seed/Cselect_mode/Cstart_spots', this.data);
      this.data = php.substr(this.data, 6);
      this.game.random_seed = temp.random_seed;
      this.game.select_mode = convert.select_mode(temp.select_mode);
      if (temp.start_spots !== 0xCC) {
        return this.game.start_spots = temp.start_spots;
      }
    };

    Replay.prototype.parseblocks = function() {
      var block_id, data_left, prev, temp;
      data_left = php.strlen(this.data);
      block_id = 0;
      while (data_left > this.max_datablock) {
        prev = block_id;
        block_id = php.ord(this.data[0]);
        switch (block_id) {
          case 0x1E:
          case 0x1F:
            temp = unpack('x1/vlength/vtime_inc', this.data);
            if (!this.pause) {
              this.time += temp.time_inc;
            }
            if (temp.length > 2 && this.parse_actions) {
              this.parseactions(php.substr(this.data, 5, temp.length - 2), temp.length - 2);
            }
            this.data = php.substr(this.data, temp.length + 3);
            data_left -= temp.length + 3;
            break;
          case 0x20:
            if (this.header.major_v > 2) {
              temp = unpack('x1/Cplayer_id/vlength/Cflags/vmode', this.data);
              if (temp.flags === 0x20) {
                temp.mode = convert.chat_mode(temp.mode);
                temp.text = php.substr(this.data, 9, temp.length - 6);
              } else if (temp.flags === 0x10) {
                temp.text = php.substr(this.data, 7, temp.length - 3);
                delete temp.mode;
              }
              this.data = php.substr(this.data, temp.length + 4);
              data_left -= temp.length + 4;
              temp.time = +this.time;
              temp.player_name = this.players[temp.player_id].name;
              this.chat.push(temp);
            }
            break;
          case 0x22:
            temp = php.ord(this.data[1]);
            this.data = php.substr(this.data, temp + 2);
            data_left -= temp + 2;
            break;
          case 0x1A:
          case 0x1B:
          case 0x1C:
            this.data = php.substr(this.data, 5);
            data_left -= 5;
            break;
          case 0x23:
            this.data = php.substr(this.data, 11);
            data_left -= 11;
            break;
          case 0x2F:
            this.data = php.substr(this.data, 9);
            data_left -= 9;
            break;
          case 0x17:
          case 0x54:
            this.leaves++;
            temp = unpack('x1/Vreason/Cplayer_id/Vresult/Vunknown', this.data);
            this.players[temp.player_id].time = +this.time;
            this.players[temp.player_id].leave_reason = temp.reason;
            this.players[temp.player_id].leave_result = temp.result;
            this.data = php.substr(this.data, 14);
            data_left -= 14;
            if (this.leave_unknown) {
              this.leave_unknown = temp.unknown - this.leave_unknown;
            }
            if (this.leaves === this.game.player_count) {
              this.game.saver_id = temp.player_id;
              this.game.saver_name = this.players[temp.player_id].name;
            }
            if (temp.reason === 0x01) {
              switch (temp.result) {
                case 0x08:
                  this.game.loser_team = this.players[temp.player_id].team;
                  break;
                case 0x09:
                  this.game.winner_team = this.players[temp.player_id].team;
                  break;
                case 0x0A:
                  this.game.loser_team = 'tie';
                  this.game.winner_team = 'tie';
              }
            } else if (temp.reason === 0x0C && this.game.saver_id) {
              switch (temp.result) {
                case 0x07:
                  if (this.leave_unknown > 0 && this.continue_game) {
                    this.game.winner_team = this.players[this.game.saver_id].team;
                  } else {
                    this.game.loser_team = this.players[this.game.saver_id].team;
                  }
                  break;
                case 0x08:
                  this.game.loser_team = this.players[this.game.saver_id].team;
                  break;
                case 0x09:
                  this.game.winner_team = this.players[this.game.saver_id].team;
                  break;
                case 0x0B:
                  if (this.leave_unknown > 0) {
                    this.game.winner_team = this.players[this.game.saver_id].team;
                  }
              }
            } else if (temp.reason === 0x0C) {
              switch (temp.result) {
                case 0x07:
                  this.game.loser_team = 99;
                  break;
                case 0x08:
                  this.game.winner_team = this.players[temp.player_id].team;
                  break;
                case 0x09:
                  this.game.winner_team = 99;
                  break;
                case 0x0A:
                  this.game.loser_team = 'tie';
                  this.game.winner_team = 'tie';
              }
            }
            this.leave_unknown = temp.unknown;
            break;
          case 0:
            data_left = 0;
            break;
          default:
            return exit('Unhandled replay command block at ' + convert.time(this.time) + ': 0x' + php.sprintf('%02X', block_id) + ' (prev: 0x' + php.sprintf('%02X', prev) + ', time: ' + this.time + ') in ' + this.filename);
        }
      }
    };

    Replay.prototype.parseactions = function(actionblock, data_length) {
      var ability, action, block_length, hero, i, itemid, n, name, player_id, prev, race_detected, retraining_time, temp, value, was_deselect, was_subgroup, was_subupdate, _ref, _results;
      block_length = 0;
      action = 0;
      _results = [];
      while (data_length) {
        if (block_length) {
          actionblock = php.substr(actionblock, block_length);
        }
        temp = unpack('Cplayer_id/vlength', actionblock);
        player_id = temp.player_id;
        block_length = temp.length + 3;
        data_length -= block_length;
        was_deselect = false;
        was_subupdate = false;
        was_subgroup = false;
        n = 3;
        while (n < block_length) {
          prev = action;
          action = php.ord(actionblock[n]);
          switch (action) {
            case 0x10:
              this.players[player_id].actions++;
              if (this.header.major_v >= 13) {
                n++;
              }
              itemid = php.strrev(php.substr(actionblock, n + 2, 4));
              value = convert.itemid(itemid);
              if (!value) {
                this.players[player_id].actions_details[actions.ability]++;
                if (php.ord(actionblock[n + 2]) === 0x33 && php.ord(actionblock[n + 3]) === 0x02) {
                  name = php.substr(convert.itemid('ubsp'), 2);
                  this.players[player_id].units.order[this.time] = this.players[player_id].units_multiplier + ' ' + name;
                  if (!this.players[player_id].units[name]) {
                    this.players[player_id].units[name] = 0;
                  }
                  this.players[player_id].units[name]++;
                  name = php.substr(convert.itemid('uobs'), 2);
                  if (!this.players[player_id].units[name]) {
                    this.players[player_id].units[name] = 0;
                  }
                  this.players[player_id].units[name]--;
                }
              } else {
                this.players[player_id].actions_details[actions.buildtrain]++;
                if (!this.players[player_id].race_detected) {
                  if (race_detected = convert.race(itemid)) {
                    this.players[player_id].race_detected = race_detected;
                  }
                }
                name = php.substr(value, 2);
                switch (value[0]) {
                  case 'u':
                    if ((this.time - this.players[player_id].units_time > ACTION_DELAY || itemid !== this.players[player_id].last_itemid) || ((itemid === 'hpea' || itemid === 'ewsp' || itemid === 'opeo' || itemid === 'uaco') && this.time - this.players[player_id].units_time > 0)) {
                      this.players[player_id].units_time = +this.time;
                      this.players[player_id].units.order[this.time] = this.players[player_id].units_multiplier + ' ' + name;
                      this.players[player_id].units[name] = this.players[player_id].units[name] || 0;
                      this.players[player_id].units[name] += this.players[player_id].units_multiplier;
                    }
                    break;
                  case 'b':
                    this.players[player_id].buildings.order[this.time] = name;
                    if (!this.players[player_id].buildings[name]) {
                      this.players[player_id].buildings[name] = 0;
                    }
                    this.players[player_id].buildings[name]++;
                    break;
                  case 'h':
                    this.players[player_id].heroes.order[this.time] = name;
                    this.players[player_id].heroes[name] = this.players[player_id].heroes[name] || {};
                    this.players[player_id].heroes[name].revivals = this.players[player_id].heroes[name].revivals || 0;
                    this.players[player_id].heroes[name].revivals++;
                    break;
                  case 'a':
                    _ref = php.explode(':', name), hero = _ref[0], ability = _ref[1];
                    this.players[player_id].heroes[hero] = this.players[player_id].heroes[hero] || {};
                    retraining_time = this.players[player_id].retraining_time;
                    if (!this.players[player_id].heroes[hero].retraining_time) {
                      this.players[player_id].heroes[hero].retraining_time = 0;
                    }
                    if (!this.players[player_id].heroes[hero].abilities) {
                      this.players[player_id].heroes[hero].abilities = {
                        order: {}
                      };
                    }
                    this.players[player_id].heroes[hero].abilities[retraining_time] = this.players[player_id].heroes[hero].abilities[retraining_time] || {};
                    this.players[player_id].heroes[hero].abilities[retraining_time][ability] = this.players[player_id].heroes[hero].abilities[retraining_time][ability] || 0;
                    if ((this.time - this.players[player_id].heroes[hero].ability_time > ACTION_DELAY || !this.players[player_id].heroes[hero].ability_time || this.time - retraining_time < RETRAINING_TIME) && this.players[player_id].heroes[hero].abilities[retraining_time][ability] < 3) {
                      if (this.time - retraining_time > RETRAINING_TIME) {
                        this.players[player_id].heroes[hero].ability_time = +this.time;
                        if (!this.players[player_id].heroes[hero].level) {
                          this.players[player_id].heroes[hero].level = 0;
                        }
                        this.players[player_id].heroes[hero].level++;
                        if (!this.players[player_id].heroes[hero].abilities[this.players[player_id].heroes[hero].retraining_time][ability]) {
                          this.players[player_id].heroes[hero].abilities[this.players[player_id].heroes[hero].retraining_time][ability] = 0;
                        }
                        this.players[player_id].heroes[hero].abilities[this.players[player_id].heroes[hero].retraining_time][ability]++;
                      } else {
                        this.players[player_id].heroes[hero].retraining_time = retraining_time;
                        this.players[player_id].heroes[hero].abilities.order[retraining_time] = 'Retraining';
                        if (!this.players[player_id].heroes[hero].abilities[retraining_time][ability]) {
                          this.players[player_id].heroes[hero].abilities[retraining_time][ability] = 0;
                        }
                        this.players[player_id].heroes[hero].abilities[retraining_time][ability]++;
                      }
                      this.players[player_id].heroes[hero].abilities.order[this.time] = ability;
                    }
                    break;
                  case 'i':
                    this.players[player_id].items.order[this.time] = name;
                    if (!this.players[player_id].items[name]) {
                      this.players[player_id].items[name] = 0;
                    }
                    this.players[player_id].items[name]++;
                    if (itemid === 'tret') {
                      this.players[player_id].retraining_time = +this.time;
                    }
                    break;
                  case 'p':
                    if (this.time - this.players[player_id].upgrades_time > ACTION_DELAY || itemid !== this.players[player_id].last_itemid) {
                      this.players[player_id].upgrades_time = +this.time;
                      this.players[player_id].upgrades.order[this.time] = name;
                      if (!this.players[player_id].upgrades[name]) {
                        this.players[player_id].upgrades[name] = 0;
                      }
                      this.players[player_id].upgrades[name]++;
                    }
                    break;
                  default:
                    this.errors[this.time] = 'Unknown ItemID at ' + convert.time(this.time) + ': ' + value;
                }
                this.players[player_id].last_itemid = itemid;
              }
              if (this.header.major_v >= 7) {
                n += 14;
              } else {
                n += 6;
              }
              break;
            case 0x11:
              this.players[player_id].actions++;
              if (this.header.major_v >= 13) {
                n++;
              }
              if (php.ord(actionblock[n + 2]) <= 0x19 && php.ord(actionblock[n + 3]) === 0x00) {
                this.players[player_id].actions_details[actions.basic]++;
              } else {
                this.players[player_id].actions_details[actions.ability]++;
              }
              value = php.strrev(php.substr(actionblock, n + 2, 4));
              if (value = convert.buildingid(value)) {
                this.players[player_id].buildings.order[this.time] = value;
                if (!this.players[player_id].buildings[value]) {
                  this.players[player_id].buildings[value] = 0;
                }
                this.players[player_id].buildings[value]++;
              }
              if (this.header.major_v >= 7) {
                n += 22;
              } else {
                n += 14;
              }
              break;
            case 0x12:
              this.players[player_id].actions++;
              if (this.header.major_v >= 13) {
                n++;
              }
              if (php.ord(actionblock[n + 2]) === 0x03 && php.ord(actionblock[n + 3]) === 0x00) {
                this.players[player_id].actions_details[actions.rightclick]++;
              } else if (php.ord(actionblock[n + 2]) <= 0x19 && php.ord(actionblock[n + 3]) === 0x00) {
                this.players[player_id].actions_details[actions.basic]++;
              } else {
                this.players[player_id].actions_details[actions.ability]++;
              }
              if (this.header.major_v >= 7) {
                n += 30;
              } else {
                n += 22;
              }
              break;
            case 0x13:
              this.players[player_id].actions++;
              if (this.header.major_v >= 13) {
                n++;
              }
              this.players[player_id].actions_details[actions.item]++;
              if (this.header.major_v >= 7) {
                n += 38;
              } else {
                n += 30;
              }
              break;
            case 0x14:
              this.players[player_id].actions++;
              if (this.header.major_v >= 13) {
                n++;
              }
              if (php.ord(actionblock[n + 2]) === 0x03 && php.ord(actionblock[n + 3]) === 0x00) {
                this.players[player_id].actions_details[actions.rightclick]++;
              } else if (php.ord(actionblock[n + 2]) <= 0x19 && php.ord(actionblock[n + 3]) === 0x00) {
                this.players[player_id].actions_details[actions.basic]++;
              } else {
                this.players[player_id].actions_details[actions.ability]++;
              }
              if (this.header.major_v >= 7) {
                n += 43;
              } else {
                n += 35;
              }
              break;
            case 0x16:
              temp = unpack('Cmode/vnum', php.substr(actionblock, n + 1, 3));
              if (temp.mode === 0x02 || !was_deselect) {
                this.players[player_id].actions++;
                this.players[player_id].actions_details[actions.select]++;
              }
              was_deselect = temp.mode === 0x02;
              this.players[player_id].units_multiplier = temp.num;
              n += 4 + (temp.num * 8);
              break;
            case 0x17:
              this.players[player_id].actions++;
              this.players[player_id].actions_details[actions.assignhotkey]++;
              temp = unpack('Cgroup/vnum', php.substr(actionblock, n + 1, 3));
              this.players[player_id].hotkeys[temp.group] = this.players[player_id].hotkeys[temp.group] || {};
              this.players[player_id].hotkeys[temp.group].assigned = this.players[player_id].hotkeys[temp.group].assigned || 0;
              this.players[player_id].hotkeys[temp.group].assigned++;
              this.players[player_id].hotkeys[temp.group].last_totalitems = temp.num;
              n += 4 + (temp.num * 8);
              break;
            case 0x18:
              this.players[player_id].actions++;
              this.players[player_id].actions_details[actions.selecthotkey]++;
              this.players[player_id].hotkeys[php.ord(actionblock[n + 1])].used = this.players[player_id].hotkeys[php.ord(actionblock[n + 1])].used || 0;
              this.players[player_id].hotkeys[php.ord(actionblock[n + 1])].used++;
              this.players[player_id].units_multiplier = this.players[player_id].hotkeys[php.ord(actionblock[n + 1])].last_totalitems;
              n += 3;
              break;
            case 0x19:
              if (this.header.build_v >= 6040 || this.header.major_v > 14) {
                if (was_subgroup) {
                  this.players[player_id].actions++;
                  this.players[player_id].actions_details[actions.subgroup]++;
                  this.players[player_id].units_multiplier = 1;
                }
                n += 13;
              } else {
                if (php.ord(actionblock[n + 1]) !== 0 && php.ord(actionblock[n + 1]) !== 0xFF && !was_subupdate) {
                  this.players[player_id].actions++;
                  this.players[player_id].actions_details[actions.subgroup]++;
                }
                was_subupdate = php.ord(actionblock[n + 1]) === 0xFF;
                n += 2;
              }
              break;
            case 0x1A:
              if (this.header.build_v >= 6040 || this.header.major_v > 14) {
                n += 1;
                was_subgroup = prev === 0x19 || prev === 0;
              } else {
                n += 10;
              }
              break;
            case 0x1B:
              if (this.header.build_v >= 6040 || this.header.major_v > 14) {
                n += 10;
              } else {
                this.players[player_id].actions++;
                n += 10;
              }
              break;
            case 0x1C:
              if (this.header.build_v >= 6040 || this.header.major_v > 14) {
                this.players[player_id].actions++;
                n += 10;
              } else {
                this.players[player_id].actions++;
                n += 9;
              }
              break;
            case 0x1D:
            case 0x1E:
              if ((this.header.build_v >= 6040 || this.header.major_v > 14) && action !== 0x1E) {
                this.players[player_id].actions++;
                n += 9;
              } else {
                this.players[player_id].actions++;
                this.players[player_id].actions_details[actions.removeunit]++;
                value = convert.itemid(php.strrev(php.substr(actionblock, n + 2, 4)));
                name = php.substr(value, 2);
                switch (value[0]) {
                  case 'u':
                    if (this.time - this.players[player_id].runits_time > ACTION_DELAY || value !== this.players[player_id].runits_value) {
                      this.players[player_id].runits_time = +this.time;
                      this.players[player_id].runits_value = value;
                      this.players[player_id].units.order[this.time] = '-1 ' + name;
                      if (!this.players[player_id].units[name]) {
                        this.players[player_id].units[name] = 0;
                      }
                      this.players[player_id].units[name]--;
                    }
                    break;
                  case 'b':
                    if (!this.players[player_id].buildings[name]) {
                      this.players[player_id].buildings[name] = 0;
                    }
                    this.players[player_id].buildings[name]--;
                    break;
                  case 'h':
                    if (!this.players[player_id].heroes[name]) {
                      this.players[player_id].heroes[name] = 0;
                    }
                    if (!this.players[player_id].heroes[name].revivals) {
                      this.players[player_id].heroes[name].revivals = 0;
                    }
                    this.players[player_id].heroes[name].revivals--;
                    break;
                  case 'p':
                    if (this.time - this.players[player_id].rupgrades_time > ACTION_DELAY || value !== this.players[player_id].rupgrades_value) {
                      this.players[player_id].rupgrades_time = +this.time;
                      this.players[player_id].rupgrades_value = value;
                      if (!this.players[player_id].upgrades[name]) {
                        this.players[player_id].upgrades[name] = 0;
                      }
                      this.players[player_id].upgrades[name]--;
                    }
                }
                n += 6;
              }
              break;
            case 0x21:
              n += 9;
              break;
            case 0x50:
              n += 6;
              break;
            case 0x51:
              n += 10;
              break;
            case 0x60:
              n += 9;
              while (actionblock[n] !== "\x00") {
                n++;
              }
              ++n;
              break;
            case 0x61:
              this.players[player_id].actions++;
              this.players[player_id].actions_details[actions.esc]++;
              ++n;
              break;
            case 0x62:
              if (this.header.major_v >= 7) {
                n += 13;
              } else {
                n += 9;
              }
              break;
            case 0x65:
              this.players[player_id].actions++;
              this.players[player_id].actions_details[actions.heromenu]++;
              ++n;
              break;
            case 0x66:
              this.players[player_id].actions++;
              if (this.header.major_v >= 7) {
                this.players[player_id].actions_details[actions.heromenu]++;
              } else {
                this.players[player_id].actions_details[actions.buildmenu]++;
              }
              n += 1;
              break;
            case 0x67:
              if (this.header.major_v >= 7) {
                this.players[player_id].actions++;
                this.players[player_id].actions_details[actions.buildmenu]++;
                n += 1;
              } else {
                n += 13;
              }
              break;
            case 0x68:
              if (this.header.major_v >= 7) {
                n += 13;
              } else {
                n += 17;
              }
              break;
            case 0x69:
            case 0x6A:
              this.continue_game = 1;
              n += 17;
              break;
            case 0x01:
              this.pause = true;
              temp = '';
              temp.time = +this.time;
              temp.text = convert.chat_mode(0xFE, this.players[player_id].name);
              this.chat.push(temp);
              n += 1;
              break;
            case 0x02:
              temp = '';
              this.pause = false;
              temp.time = +this.time;
              temp.text = convert.chat_mode(0xFF, this.players[player_id].name);
              this.chat.push(temp);
              n += 1;
              break;
            case 0x04:
            case 0x05:
              n += 1;
              break;
            case 0x03:
              n += 2;
              break;
            case 0x06:
              i = 1;
              while (actionblock[n] !== "\x00") {
                n++;
              }
              n += 1;
              break;
            case 0x07:
              n += 5;
              break;
            case 0x75:
              n += 2;
              break;
            default:
              temp = '';
              i = 0;
              while (i < n) {
                temp += php.sprintf('%02X', php.ord(actionblock[i])) + ' ';
                i++;
              }
              temp += '[' + php.sprintf('%02X', php.ord(actionblock[n])) + '] ';
              i = 0;
              while (n + i < php.strlen(actionblock)) {
                temp += php.sprintf('%02X', php.ord(actionblock[n + i])) + ' ';
                i++;
              }
              this.errors.push('Unknown action at ' + convert.time(this.time) + ': 0x' + php.sprintf('%02X', action) + ', prev: 0x' + php.sprintf('%02X', prev) + ', dump: ' + temp);
              continue3;
          }
        }
        was_deselect = action === 0x16;
        _results.push(was_subupdate = action === 0x19);
      }
      return _results;
    };

    Replay.prototype.cleanup = function() {
      var loser, player, player_id, team, team_id, winner, _ref, _ref1, _ref2, _results, _results1;
      _ref = this.players;
      for (player_id in _ref) {
        player = _ref[player_id];
        if (!player.time) {
          this.players[player.player_id].time = this.header.length;
        }
        if (this.parse_actions) {
          if (this.players[player_id].team !== 12 && this.players[player_id].computer === 0) {
            this.players[player_id].apm = this.players[player_id].actions / this.players[player_id].time * 60000;
          }
        }
        if (typeof player.team !== 'undefined') {
          if (!this.teams[player.team]) {
            this.teams[player.team] = {};
          }
          this.teams[player.team][player_id] = player;
        }
        delete player.last_itemid;
      }
      this.players[this.game.saver_id] = this.players[this.game.saver_id] || {};
      if (this.game.winner_team === 99) {
        this.game.winner_team = this.players[this.game.saver_id].team || 0;
      } else if (this.game.loser_team === 99) {
        this.game.loser_team = this.players[this.game.saver_id].team || 0;
      }
      winner = (_ref1 = typeof this.game.winner_team !== 'undefined') != null ? _ref1 : {
        "true": false
      };
      loser = (_ref2 = typeof this.game.loser_team !== 'undefined') != null ? _ref2 : {
        "true": false
      };
      if (!winner && loser) {
        team_id = this.teams.length;
        _results = [];
        while (team_id--) {
          team = this.teams[team_id];
          if (team_id !== this.game.loser_team && team_id !== 12) {
            this.game.winner_team = team_id;
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      } else if (!loser && winner) {
        team_id = this.teams.length;
        _results1 = [];
        while (team_id--) {
          team = this.teams[team_id];
          if (team_id !== this.game.winner_team && team_id !== 12) {
            this.game.loser_team = team_id;
            break;
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      }
    };

    return Replay;

  })();

}).call(this);
